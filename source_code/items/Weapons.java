package items;

import creatures.*;
import weight.*;

import java.util.*;

import be.kuleuven.cs.som.annotate.*;

/**
 * A class that defines weapons for monsters to enhance them.
 * 
 * @Invar 	The damage of the weapon is between 1 and max damage.
 *			| 1 < this.damage < this.getMaxDamage()
 * 
 * @author Murat Cem Kose & Nuno Goncalo Pires Chicoria
 *
 */
public class Weapons extends Items {
	private static ArrayList<Long> weaponIDs = new ArrayList<Long>();
	private int damage;
	private static int MAX_DAMAGE = 20;

	/**
	 * 	A constructor to create a weapon.
	 * 
	 *	@param	value
	 * 			The value of the weapon.
	 *	@param	weightType
	 * 			The unit type of the weight of the weapon.
	 * 	@param	weightAmount
	 * 			The amount of the weight of the weapon.
	 * 	@effect	The new weapon is initialized as a new item with given value, weight and the id generated by generateID()
	 *      		| super(value, itemWeight , Weapons.generateID())
	 *  @effect 	Sets the damage of the weapon.
	 *  			| setDamage()
	 *  
	 */
	public Weapons(int value, Weight itemWeight)throws Exception{
		super(value, itemWeight, Weapons.generateID());
		setDamage();
	}

	/**
	 * A number generator which generates positive odd numbers for each weapon.
	 * 	
	 * 	@post	The id that is generated is a positive odd number. 
	 * 			| ID >0 && ID % 2 == 1
	 * 	@post 	The id that is generated is a unique number for each weapon.
	 * 			|  weaponIDs.contains(ID) == false
	 * 	
	 * 	@return 	Returns a unique id for the weapon.
	 */
	public static long generateID() {
		Random rand = new Random();
		long ID = rand.nextLong();

		while(ID < 1 || ID % 2 == 0 || weaponIDs.contains(ID)) {
			ID = rand.nextLong();
		}
		weaponIDs.add(ID);
		return ID;
	}
	
	/**
	 * Returns the damage of the weapon. 
	 * 
	 */
	@Basic
	public int getDamage() {
		return this.damage;
	}

	/**
	 * Generates a random damage between 1 and max damage and assigns it the the damage of the weapon.
	 * 
	 * 	@post 	The damage of the weapon is between 1 and max damage.
	 * 			| 0 < new.damage < this.getMaxDamage()
	 * 	@post 	Generates a random integer, set the new value to the damage of the weapon.
	 * 			| new.damage = damage
	 * 
	 * 	@throws 	Exception 
	 * 		 	Throws exception if the weapon is not functional.
	 * 			| this.getIsFunctional() == False
	 * 
	 */
	public void setDamage() throws Exception{
		if(this.getIsFunctional() == false)
			throw new Exception ("This weapon is broken and cannot be used.");
		Random rand = new Random();
		int  damage = rand.nextInt(getMaxDamage()) + 1;
		this.damage = damage;
	}

	/**
	 * Returns the max damage of the weapon. 
	 * 
	 */
	@Basic @Immutable
	public static int getMaxDamage() {
		return MAX_DAMAGE;
	}
	/**
	 * Implementation of get TotalValue method from the abstract class of Items. 
	 * Returns the value of the weapon.
	 * 
	 */
	@Basic @Immutable
	public int getTotalValue() {
		return this.getValue();
	}

	/**
	 * Transfers the weapon to another monster.
	 * 
	 * @param 	newHolder
	 * 		  	The monster which the weapon will be transfered.
	 * 
	 * @effect 	The transfer of the weapon from one monster 
	 * 			| newHolder.transferItem(this)
	 * 
	 * @throws 	Exception
	 * 		  	Throws exception if there is no holder assigned to the weapon.
	 * 		  	| this.getHolder() == null
	 * @throws 	Exception
	 * 		  	Throws exception if the holder of the weapon is not a monster.
	 * 		  	| Monsters.class.isInstance(this.getHolder()) != true
	 * 
	 */
	public void transferWeapon(Monsters newHolder) throws Exception {
		if (this.getHolder() != null) {
			if (Monsters.class.isInstance(this.getHolder())) {
				newHolder.transferItem(this);
				this.setIsFunctional(true);
			}
			else
				throw new Exception("Only monsters can exchange weapons.");
		}
		else 
			throw new Exception("This weapon doesn't have an owner.");
	}

	/**
	 * Implementation of get TotalWeight method from the abstract class of Items. 
	 * Returns the weight of the weapon.
	 * 
	 */
	@Basic @Immutable
	public Weight getTotalWeight() {
		return this.getWeight();
	}

	/**
	 * Displays the properties of the weapon. 
	 * 
	 */
	public void displayProperties() {
		if(this.getIsFunctional() == false)
			System.out.println("This weapon is destroyed.");
		else {
			System.out.println("Weapon " + this.getItemID() + " properties.");
			System.out.println("Weight: " + this.getWeight().getWeightAmount());
			System.out.println("Value: " + this.getValue());
			System.out.println("Damage: " + this.getDamage());
			if (this.getHolder() == null)
				System.out.println("Holder: null");
			else
				if (this.getHolder() instanceof Monsters)
					System.out.println("Holder: " + ((Monsters)this.getHolder()).getName());
				else
					System.out.println("Holder: " + ((Backpacks)this.getHolder()).getItemID());
		}
	}

}
